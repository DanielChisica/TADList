/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import javax.swing.JCheckBox;
import tad.list.*;
import Task.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;


/**
 * The class TaskList is the GUI through the user can adds new tasks and picks
 * on they if he already done them
 * @author Daniel Jim√©nez
 * @since 3 March 2017
 */
public class TaskList extends javax.swing.JFrame {

    /**
     * Creates new form TaskList
     */
    public TaskList() {
        initComponents();
        read();
        Iterator it=list1.iterator();
        
       
        while (it.hasNext()) {  
            Task t2=(Task) it.next();
            jPanel1.add(new JCheckBox(t2.getName(),t2.isDone()));
        }
        this.validate();
        this.repaint();
        
        
        while (it.hasNext()) {   
            Task t1=(Task) it.next();
            System.out.println(t1.getName()+" "+t1.isDone());
        }
        
        this.addWindowListener(new java.awt.event.WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    save(); //To change body of generated methods, choose Tools | Templates.
                } catch (IOException ex) {
                    Logger.getLogger(TaskList.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
          
        });
    }
    
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new java.awt.GridLayout(10, 1));

        jTextField1.setText("...To do");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N
        jButton1.setText("+");
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(jButton1)
                .addContainerGap(128, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * When the user press the add button, this method adds the task to the list
     * and makes the correspondent JCheckbox, also contains the logic for
     * listening a checkbox event, search the equal task and picks it like done
     * @param evt The click on the add button
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: 
        Task task1=new Task(jTextField1.getText(), false);
        list1.add(task1);
       //JCheckBox jchk1=new JCheckBox(task1.getName());
       
       jPanel1.add(new JCheckBox(new AbstractAction(task1.getName()) {
           @Override
           public void actionPerformed(ActionEvent e) {
               Task task2=new Task(task1.getName(), true);
               list1.substitute(list1.search(task1).getElement(),task2 );
               
//To change body of generated methods, choose Tools | Templates.
           }
       }));
       
       
       
       jPanel1.repaint();
       jPanel1.revalidate();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * Saves the current tasks creating a file
     * @throws IOException If isn't possible save
     */
    public void save() throws IOException {
       FileOutputStream fos=null;
       try{
       fos= new FileOutputStream("list1.obj");
       ObjectOutputStream oos= new ObjectOutputStream(fos);
       oos.writeObject((Object)list1);
       oos.close();
       fos.close();
       }
       
       catch (FileNotFoundException ex){
           Logger.getLogger(TaskList.class.getName()).log(Level.SEVERE, null, ex);
       }
       
       finally{
           try {
               fos.close();
            } catch (IOException ex) {
                Logger.getLogger(TaskList.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
    }
    
    /**
     * Reads a input file and makes an object from this
     */
    public void read(){
        try {
            FileInputStream fis = new FileInputStream("list1.obj");
            ObjectInputStream ois = new ObjectInputStream(fis);
            list1 = (List) ois.readObject();
            fis.close();
            ois.close();
        } catch (Exception e) {
        }
        
    }
    
    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        // TODO add your handling code here:
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskList().setVisible(true);
            }
        });
    }
    List list1=new List();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
